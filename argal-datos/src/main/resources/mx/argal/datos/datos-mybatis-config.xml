<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cloud="http://schema.cloudfoundry.org/spring"       
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/jee
       http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://schema.cloudfoundry.org/spring
       http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.6.xsd">

	<!-- spring-mybatis crea implementaciones de los daos a partir de la interfaz,
			sin embargo, si se requieren implementaciones específicas, podrán colocarse dentro
	 -->
	<context:component-scan base-package="mx.argal.dao.impl"/>
	
	<!-- Este bean que provee mybatis es el encargado de crear implementaciones de nuestros daos al
		 vuelo -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="mx.argal.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- Bean para configurar mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- Archivo de principales configuraciones de mybatis. Settings como el cache van en este archivo. -->
		<property name="configLocation" value="classpath:mx/argal/datos/mybatis-sqlmap.xml" />
		<!-- Con esta propiedad pedimos al SessionFactory que al referir a una clase de nuestro modelo
			sólo tengamos que mencionar su nombre (y no le paquete completo). -->
		<property name="typeAliasesPackage" value="mx.argal.modelo" />
		<!-- La ubicación de todos mapeos de SQL que mybatis tomará. -->
		<property name="mapperLocations" value="classpath*:mx/argal/datos/mybatis/**/*.xml" />
	</bean>
	
	<!-- Bean que maneja la transacción de conexiones que provienen de un DataSource para drives JDBC2.0
		o JDBC3.0. Recomendable este último pues soporta transacciones anidadas (nested transactions) entre otros beneficios.-->	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	    p:dataSource-ref="dataSource" />	    
	<!-- Aqui especificamos de dónde provendrán las conexiones a base de datos cuando ejecutemos en "profile" desarrollo. -->
	
	<!-- DESARROLLO OK -->
	<!--cloud:data-source id="dataSource" service-name="postgresql-a480712"/-->
	<beans profile="cloud">
		<!--  cloud:data-source id="dataSource" service-name="postgresql-a480712"/>-->
	</beans>
	<beans profile="desarrollo">
		<!--  cloud:data-source id="dataSource" service-name="postgresql-a480712"/>-->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="org.postgresql.Driver" />
			<property name="url" value="jdbc:postgresql://localhost:5532/argal" />
			<property name="username" value="postgres" />
			<property name="password" value="root" />
			<property name="initialSize" value="2" />
			<property name="maxActive" value="5" />
		</bean>
	</beans>
	 
	<!-- CLOUD FOUNDRY caldecott-->	
	<beans profile="desarrollocloud">
		<!--  bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="org.postgresql.Driver" />
			<property name="url" value="jdbc:postgresql://127.0.0.1:10100/dfdeb384322d84b73a1c5667a8064c0a5" />
			<property name="username" value="uaaf17608a0844fa7b3e24f1cc344f838" />
			<property name="password" value="p00c8023344794906ab117f2b90c426cd" />
			<property name="initialSize" value="2" />
			<property name="maxActive" value="5" />
		</bean>
		-->
	</beans>
		    		
	<!-- Podemos agregar otros profiles si requerimos de otros ambientes aplicativos. -->
	<beans profile="produccion">
		<!-- Aqui se podría agregar un datasource a un recurso JNDI -->
        <jee:jndi-lookup id="dataSource" jndi-name="jdbc/argal"/>
	</beans>
    
</beans>
